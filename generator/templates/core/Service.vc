package ${PackageName};

import ${Properties.get("core-model-package")}.${ClassName};
#foreach($Attribute in $Attributes)
#if (${Attribute.isReference()})
import ${Properties.get("core-model-package")}.${Attribute.getTypeName()};
#end
#end
import java.util.List;
#if (!$Class.getAttributesWithPropertySet("findable").isEmpty())
import java.util.Optional;
#end
import lombok.Generated;

#foreach($Import in $Imports)
import ${Import};
#end

/**
 * ${GeneratedCodeMarker}
 *
 * Remove this comment to suspend class from generation process.
 */
@Generated
public interface ${ClassName}Service {

	${ClassName} create${ClassName}(#foreach($Attribute in ${Class.getAttributesWithPropertyNotSet("id")})${Attribute.getTypeName()} ${Attribute.getName()}#if($foreach.hasNext), #end#end);

	void delete${ClassName}(${Class.getAttributeTypeNameByPropertyName("id")} id);
#foreach($Attribute in ${Class.getAttributesWithPropertySet("findable")})

	Optional<${ClassName}> findByIdOr${Attribute.getNameCamelCase()}Particle(String namePartOrId);
#end

	List<${ClassName}> list${ClassName}s();
}