package ${PackageName};

#if($Class.hasAnAttributeWithTypeName("LocalDate") || $Class.hasAnAttributeWithTypeName("LocalTime"))
import ${Properties.get("baselib")}.util.DateTimeUtil;
#end
import ${Properties.get("core-service-package")}.${ClassName}Service;
import ${Properties.get("core-model-package")}.${ClassName};
import ${Properties.get("swing-gui-package")}.EditDialogComponentFactory;
import ${Properties.get("swing-gui-package")}.edit.${ClassName.toLowerCase()}.${ClassName}EditJInternalFrame;
import ${Properties.get("swing-gui-package")}.select.AbstractSelectJPanel;
import ${Properties.get("swing-gui-package")}.select.AbstractSelectionTableModel;
import ${Properties.get("swing-gui-package")}.select.SelectionPanelObserver;
import java.util.List;
import javax.swing.JDesktopPane;
import lombok.Generated;

#foreach($Import in $Imports)
import ${Import};
#end

/**
 * ${GeneratedCodeMarker}
 *
 * Remove this comment to suspend class from generation process.
 */
@Generated
public class ${ClassName}SelectJPanel extends AbstractSelectJPanel<${ClassName}> implements SelectionPanelObserver {

	private final ${ClassName}Service ${ClassNameAsAttribute}Service;

	public ${ClassName}SelectJPanel(
		${ClassName}Service ${ClassNameAsAttribute}Service,
		String className,
		JDesktopPane desktopPane,
		EditDialogComponentFactory editDialogComponentFactory,
		SelectionPanelObserver observer
	) {
		super(desktopPane, className + "s", editDialogComponentFactory, observer);
		this.${ClassNameAsAttribute}Service = ${ClassNameAsAttribute}Service;
		updateTableSelection();
	}

	@Override
	protected List<${ClassName}> getObjectsToSelect() {
		return ${ClassNameAsAttribute}Service != null
			? ${ClassNameAsAttribute}Service
				.list${ClassName}s()
				.stream()
				#foreach($Property in $Class.getPropertiesWithName("order"))
				#set ($Attribute = $Class.getAttributeByName($Property.getValue()))
				.sorted((d0, d1) -> d1.get${Attribute.getNameCamelCase()}().compareTo(d0.get${Attribute.getNameCamelCase()}()))
				#end
				.toList()
			: List.of();
	}

	@Override
	protected AbstractSelectionTableModel<${ClassName}> createSelectionModel() {
		return new AbstractSelectionTableModel<${ClassName}>(getObjectsToSelect(), #foreach($Attribute in $Class.getAttributesWithPropertySetSortedByPropertyValue("editor-position"))"${Attribute.getNameCamelCase()}"#if($foreach.hasNext), #end#end) {
			@Override
			protected Object getColumnValueFor(${ClassName} t, int columnIndex) {
				return switch (columnIndex) {
					#set($count = 0)
					#foreach($Attribute in $Class.getAttributesWithPropertySetSortedByPropertyValue("editor-position"))
					#if($Attribute.getTypeName() == "LocalDate")
					case $count -> DateTimeUtil.DE_DATE_FORMAT.format(t.get$Attribute.getNameCamelCase()());
					#elseif($Attribute.getTypeName() == "LocalTime")
					case $count -> DateTimeUtil.DE_TIME_FORMAT.format(t.get$Attribute.getNameCamelCase()());
					#else
					case $count -> t.get${Attribute.getNameCamelCase()}();
					#end
					#set($count = $count + 1)
					#end
					default -> null;
				};
			}
		};
	}

	@Override
	protected void createEditInternalFrame(${ClassName} selected) {
		new ${ClassName}EditJInternalFrame(selected, getClassName(), getEditDialogComponentFactory(), this, getDesktopPane());
	}

	@Override
	protected ${ClassName} createNewObject() {
		return ${ClassNameAsAttribute}Service.create${ClassName}(
		#foreach($Attribute in ${Class.getAttributesWithPropertyNotSet("id")})
			#if($Attribute.getTypeName() == "LocalDate")
				LocalDate.now()#if($foreach.hasNext),#end
			#elseif($Attribute.getTypeName() == "LocalTime")
				LocalTime.now()#if($foreach.hasNext),#end
			#else
				"?"#if($foreach.hasNext),#end
			#end
		#end);
	}

	@Override
	protected void delete(${ClassName} toDelete) {
		${ClassNameAsAttribute}Service.delete${ClassName}(toDelete.getId());
	}

	@Override
	protected void save(${ClassName} toSave) {
		${ClassNameAsAttribute}Service.update${ClassName}(toSave);
	}
}